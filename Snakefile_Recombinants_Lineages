"""``snakemake`` file that runs the AOC alignment step.
Written by Alexander G Lucaci.
"""

import itertools
import os
import sys
import csv
import json
from pathlib import Path
from snakemake.utils import min_version
#min_version('6.3.0')
from Bio import Entrez
from ete3 import NCBITaxa
import pandas as pd
from ete3 import Tree
import glob

#----------------------------------------------------------------------------
# Configuration
#----------------------------------------------------------------------------
configfile: 'config.yml'

print("# Loaded config yaml file")

with open("cluster.json", "r") as in_c:
  cluster = json.load(in_c)
#end with
in_c.close()

Nucleotide_file = config["Nucleotide"]
Protein_file = config["Protein"]
Label = config["Label"]

# Set output directory
BASEDIR = os.getcwd()
OUTDIR = os.path.join(BASEDIR, "results", Label)

CSV = os.path.join(BASEDIR, config["CSV"])

# Create output dir.
#Path(OUTDIR_RESULTS).mkdir(parents=True, exist_ok=True)
#Path(OUTDIR).mkdir(parents=True, exist_ok=True)

# This is the main treefile, prior to recombination detection.
TREE_NEWICK = os.path.join(OUTDIR, Label + "_codons.SA.fasta.treefile")

# Recombinants newicks. 
# results/mammalian_REV3L/mammalian_REV3L.10.codon.fas.treefile
# .codon.fas
FASTAS_RECOMBINANTS                 = [x for x in glob.glob(os.path.join(OUTDIR, "*.codon.fas"))]
FASTAS_RECOMBINANTS_BASENAMES       = [os.path.basename(x) for x in glob.glob(os.path.join(OUTDIR, "*.codon.fas"))]
TREE_NEWICKS_RECOMBINANTS           = [x for x in glob.glob(os.path.join(OUTDIR, "*.codon.fas.treefile"))]
TREE_NEWICKS_RECOMBINANTS_BASENAMES = [os.path.basename(x) for x in TREE_NEWICKS_RECOMBINANTS]
DATA_DICT = {}

# Set PPN
PPN = cluster["__default__"]["ppn"]

# HyPhy settings
#HYPHY = config["HYPHY"]
#HYPHYMPI = config["HYPHYMPI"]
#RES = config["RES"]

HYPHY = "hyphy"
HYPHYMPI = "HYPHYMPI"

# Report to user
print("Output directory is:", OUTDIR)
print("Orthologs (CSV) file is:", CSV)
print("Main Newick file is:", TREE_NEWICK)
print("We have", len(TREE_NEWICKS_RECOMBINANTS), "recombinant tree files")
print(TREE_NEWICKS_RECOMBINANTS)
print()
print("# Basenames for Newicks", TREE_NEWICKS_RECOMBINANTS_BASENAMES)
print()
print("# Basenames for FASTAs", FASTAS_RECOMBINANTS_BASENAMES)
print()

#----------------------------------------------------------------------------
# Helper functions
#----------------------------------------------------------------------------
if len(TREE_NEWICKS_RECOMBINANTS_BASENAMES) == 0:
    sys.exit(1)

if len(FASTAS_RECOMBINANTS_BASENAMES) == 0:
    sys.exit(1)

#----------------------------------------------------------------------------
# Rule all
#----------------------------------------------------------------------------
rule all:
    input:
        os.path.join(OUTDIR, Label + "_codons.SA.fasta.treefile.log"),
        #os.path.join(OUTDIR, "CladeLabels.json"),
        expand(os.path.join(OUTDIR, "{sample}.labelled"), sample=TREE_NEWICKS_RECOMBINANTS_BASENAMES),
        expand(os.path.join(OUTDIR, "{sample}.RELAX.json"), sample=FASTAS_RECOMBINANTS_BASENAMES),
        expand(os.path.join(OUTDIR, "{sample}.CFEL.json"), sample=FASTAS_RECOMBINANTS_BASENAMES)
#end rule all

#----------------------------------------------------------------------------
# Rules
#----------------------------------------------------------------------------
rule GatherLineages:
    input:
        out_d  = OUTDIR,
        csv_f  = CSV,
        tree_f = TREE_NEWICK
    output:
        output = TREE_NEWICK + ".log"
        #json   = os.path.join(OUTDIR, "CladeLabels.json")
    shell:
        "python scripts/LineageAnnotation_Pipeline.py {input.out_d} {input.csv_f} {input.tree_f}"
#end rule

CLADE_FILES = [x for x in glob.glob(os.path.join(OUTDIR, "*.clade"))]
print("# We have", len(CLADE_FILES), "clade files")
print(CLADE_FILES) 

# For each of the recombinant trees, annotate it according to the clade files.
rule AssignLineages:
    input:
        #os.path.join(OUTDIR, "{sample}"), rules.GatherLineages.output.json
        os.path.join(OUTDIR, "{sample}")
    output:
        os.path.join(OUTDIR, "{sample}.labelled")
    run:
        first_time = True
        for clade_file in CLADE_FILES:
            print(clade_file, input[0])
            label      = os.path.basename(clade_file).split(".")[0]

            if first_time == True:
            	cmd = " ".join([HYPHY, 
                                os.path.join(BASEDIR, "scripts", "label-tree.bf"),
                            	"--tree", input[0],
                            	"--list", clade_file,
                            	"--output", output[0],
                            	"--label", label])
                first_time = False
            else:
                cmd = " ".join([HYPHY, 
                                os.path.join(BASEDIR, "scripts", "label-tree.bf"),
                            	"--tree", output[0],
                            	"--list", clade_file,
                            	"--output", output[0],
                            	"--label", label])
            #end if
            print(cmd)
            os.system(cmd)
        #end for
    #end run
#end rule

#----------------------------------------------------------------------------
# Selection analyses
#----------------------------------------------------------------------------

rule RELAX:
    input:
        treefile = os.path.join(OUTDIR, "{sample}.treefile.labelled"),
        fasta    = os.path.join(OUTDIR, "{sample}")
    output:
        output = os.path.join(OUTDIR, "{sample}.RELAX.json")
    shell:
        "mpirun -np {PPN} {HYPHYMPI} RELAX --alignment {input.fasta} --tree {input.treefile} --output {output.output} --reference-group Primates --models All --mode 'Group mode' --starting-points 10 --srv Yes"
#end rule

rule CFEL:
    input:  
        treefile = os.path.join(OUTDIR, "{sample}.treefile.labelled"),
        fasta    = os.path.join(OUTDIR, "{sample}")
    output: 
        output = os.path.join(OUTDIR, "{sample}.CFEL.json")
    params:
        label = os.path.basename("{sample}").split(".")[0]
    shell:
        "mpirun -np {PPN} {HYPHYMPI} contrast-fel --alignment {input.fasta} --tree {input.treefile} --output {output.output} --branch-set Primates"
#end file

#----------------------------------------------------------------------------
# End of file
#----------------------------------------------------------------------------
