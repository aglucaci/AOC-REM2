"""``snakemake`` file that runs the AOC Part I Selection analysis.
Written by Alexander G Lucaci.

For this, I don't need the alignment stuff, since we have an alignment, and its recombination free (tested via RDP).
Jump back in ad the TN93 and IQTREE step, then selection analyes

"""

import itertools
import os
import sys
import csv
import json
from pathlib import Path
from snakemake.utils import min_version
import glob

print("# Snakefile for Recombinants")

#----------------------------------------------------------------------------
# Configuration
#----------------------------------------------------------------------------
configfile: 'config.yml'

with open("cluster.json", "r") as in_c:
  cluster = json.load(in_c)
#end with

Label = config["Label"]

# Batch files
FMM = config["FMM"]
BUSTEDS_MH = config["BUSTEDSMH"]
FITMG94 = config["FITMG94"]
#LabelTrees_bf = config["LabelTrees"]

# Set output directory
BASEDIR = os.getcwd()

# Set single recombinant
#Recombinant = os.path.join(BASEDIR, "results", Label, Label + ".1.codon.fas")
# Set output directory
BASEDIR = os.getcwd()

print("# We are operating out of base directory:", BASEDIR)
OUTDIR = os.path.join(BASEDIR, "results", Label)

print("# Output directory:", OUTDIR)

Recombinants = [os.path.basename(x) for x in glob.glob(OUTDIR + '/*.codon.fas')]

print("# We will process selection analyses in", len(Recombinants), "files")

#print(Recombinants)

# Set PPN
PPN = cluster["__default__"]["ppn"]

# HyPhy settings
#HYPHY = config["HYPHY"]
#HYPHYMPI = config["HYPHYMPI"]
#RES = config["RES"]

HYPHY = "hyphy"
HYPHYMPI = "HYPHYMPI"

#----------------------------------------------------------------------------
# Helper functions
#----------------------------------------------------------------------------
#print(Recombinants)

if len(Recombinants) == 0:
    sys.exit(1)

#----------------------------------------------------------------------------
# Rule all
#----------------------------------------------------------------------------
rule all:
    input:
        expand(os.path.join(OUTDIR, "{sample}.dst"), sample=Recombinants),
        expand(os.path.join(OUTDIR, "{sample}.treefile"), sample=Recombinants),
        expand(os.path.join(OUTDIR, "{sample}.MG94.json"), sample=Recombinants),
        expand(os.path.join(OUTDIR, "{sample}.FEL.json"), sample=Recombinants),
        expand(os.path.join(OUTDIR, "{sample}.FUBAR.json"), sample=Recombinants),
        expand(os.path.join(OUTDIR, "{sample}.BUSTEDS.json"), sample=Recombinants),
        expand(os.path.join(OUTDIR, "{sample}.MEME.json"), sample=Recombinants),
        expand(os.path.join(OUTDIR, "{sample}.ABSREL.json"), sample=Recombinants),
        expand(os.path.join(OUTDIR, "{sample}.SLAC.json"), sample=Recombinants),
        expand(os.path.join(OUTDIR, "{sample}.BGM.json"), sample=Recombinants),
        #expand(os.path.join(OUTDIR, "{sample}.PRIME.json"), sample=Recombinants),
        #expand(os.path.join(OUTDIR, "{sample}.ABSREL-MH.json"), sample=Recombinants),
        expand(os.path.join(OUTDIR, "{sample}.BUSTEDS-MH.json"), sample=Recombinants),
        expand(os.path.join(OUTDIR, "{sample}.FMM.json"), sample=Recombinants)
#end rule all

#----------------------------------------------------------------------------
# Rules
#----------------------------------------------------------------------------

OUTDIR = BASEDIR

#----------------------------------------------------------------------------
# TN93, on codon alignment, can be modified for distance calcs on protein aln
#----------------------------------------------------------------------------
rule tn93:
    input:
       input = os.path.join(OUTDIR, "{sample}")
    output:
       output = os.path.join(OUTDIR, "{sample}.dst")
    conda: 'environment.yml'
    shell:
       "tn93 -t 1 -o {output.output} {input.input}"
#end rule tn93

#----------------------------------------------------------------------------
# IQ-TREE for ML tree inference
#----------------------------------------------------------------------------
rule iqtree: # Unrooted
    input:
        codons_fas = os.path.join(OUTDIR, "{sample}")
    output:
        tree = os.path.join(OUTDIR, "{sample}.treefile")
    conda: 'environment.yml'
    shell:
        "iqtree -s {input.codons_fas} -T AUTO"
#end rule iqtree

#----------------------------------------------------------------------------
# Selection Analyses
#----------------------------------------------------------------------------
rule FITMG94:
    input: 
        codon_aln = os.path.join(OUTDIR, "{sample}"),
        tree = os.path.join(OUTDIR, "{sample}.treefile")
    output: 
        results = os.path.join(OUTDIR, "{sample}.MG94.json")
    conda: 'environment.yml'
    shell: 
        "{HYPHY} {FITMG94} --alignment {input.codon_aln} --tree {input.tree} --output {output.results} --rooted No --lrt Yes --type global --frequencies CF3x4"
#end rule 

rule FEL:
    input: 
        codon_aln = os.path.join(OUTDIR, "{sample}"),
        tree = os.path.join(OUTDIR, "{sample}.treefile")    
    output: 
        results = os.path.join(OUTDIR, "{sample}.FEL.json")
    conda: 'environment.yml'
    shell: 
        "mpirun -np {PPN} {HYPHYMPI} FEL --alignment {input.codon_aln} --tree {input.tree} --output {output.results} --ci Yes"
#end rule 

rule FUBAR:
    input: 
        codon_aln = os.path.join(OUTDIR, "{sample}"),
        tree = os.path.join(OUTDIR, "{sample}.treefile")
    output: 
        results = os.path.join(OUTDIR, "{sample}.FUBAR.json")
    conda: 'environment.yml'    
    shell: 
        "mpirun -np {PPN} {HYPHYMPI} FUBAR --alignment {input.codon_aln} --tree {input.tree} --output {output.results}"
#end rule 

rule BUSTEDS:
    input: 
        codon_aln = os.path.join(OUTDIR, "{sample}"),
        tree = os.path.join(OUTDIR, "{sample}.treefile")
    output: 
        results = os.path.join(BASEDIR, "{sample}.BUSTEDS.json")
    conda: 'environment.yml'
    shell: 
        "mpirun -np {PPN} {HYPHYMPI} BUSTED --alignment {input.codon_aln} --tree {input.tree} --output {output.results} --srv Yes --starting-points 10"
#end rule

rule MEME:
    input: 
        codon_aln = os.path.join(OUTDIR, "{sample}"),
        tree = os.path.join(OUTDIR, "{sample}.treefile")
    output: 
        results = os.path.join(BASEDIR, "{sample}.MEME.json")
    conda: 'environment.yml'
    shell: 
        "mpirun -np {PPN} {HYPHYMPI} MEME --alignment {input.codon_aln} --tree {input.tree} --output {output.results}"
#end rule 

rule ABSREL:
    input: 
        codon_aln = os.path.join(OUTDIR, "{sample}"),
        tree = os.path.join(OUTDIR, "{sample}.treefile")
    output: 
        results = os.path.join(BASEDIR, "{sample}.ABSREL.json")
    conda: 'environment.yml'
    shell: 
        "mpirun -np {PPN} {HYPHYMPI} ABSREL --alignment {input.codon_aln} --tree {input.tree} --output {output.results}"
#end rule

rule SLAC:
    input: 
        codon_aln = os.path.join(OUTDIR, "{sample}"),
        tree = os.path.join(OUTDIR, "{sample}.treefile")
    output: 
        results = os.path.join(BASEDIR, "{sample}.SLAC.json")
    conda: 'environment.yml'
    shell: 
        "mpirun -np {PPN} {HYPHYMPI} SLAC --alignment {input.codon_aln} --tree {input.tree} --output {output.results}"
#end rule 

rule BGM:
    input: 
        codon_aln = os.path.join(OUTDIR, "{sample}"),
        tree = os.path.join(OUTDIR, "{sample}.treefile")
    output: 
        results = os.path.join(BASEDIR, "{sample}.BGM.json")
    conda: 'environment.yml'
    shell: 
        "mpirun -np {PPN} {HYPHYMPI} BGM --alignment {input.codon_aln} --tree {input.tree} --output {output.results}"
#end rule 

rule PRIME:
    input: 
        codon_aln = os.path.join(OUTDIR, "{sample}"),
        tree = os.path.join(OUTDIR, "{sample}.treefile")
    output: 
        results = os.path.join(BASEDIR, "{sample}.PRIME.json")
    conda: 'environment.yml'
    shell: 
        "mpirun -np {PPN} {HYPHYMPI} PRIME --alignment {input.codon_aln} --tree {input.tree} --output {output.results} --impute-states Yes"
#end rule 

rule ABSRELMH:
    input: 
        codon_aln = os.path.join(OUTDIR, "{sample}"),
        tree = os.path.join(OUTDIR, "{sample}.treefile")
    output: 
        results = os.path.join(BASEDIR, "{sample}.ABSREL-MH.json")
    conda: 'environment.yml'
    shell: 
        "mpirun -np {PPN} {HYPHYMPI} ABSREL --alignment {input.codon_aln} --tree {input.tree} --output {output.results} --multiple-hits Double+Triple"
#end rule ABSRELMH

rule BUSTEDSMH:
    input: 
        codon_aln = os.path.join(OUTDIR, "{sample}"),
        tree = os.path.join(OUTDIR, "{sample}.treefile")
    output: 
        results = os.path.join(BASEDIR, "{sample}.BUSTEDS-MH.json")
    conda: 'environment.yml'
    shell: 
        "mpirun -np {PPN} {HYPHYMPI} {BUSTEDS_MH} --alignment {input.codon_aln} --tree {input.tree} --output {output.results}"
#end rule

rule FMM:
    input: 
        codon_aln = os.path.join(OUTDIR, "{sample}"),
        tree = os.path.join(OUTDIR, "{sample}.treefile")
    output: 
        results = os.path.join(BASEDIR, "{sample}.FMM.json")
    conda: 'environment.yml'
    shell: 
        "mpirun -np {PPN} {HYPHYMPI} {FMM} --alignment {input.codon_aln} --tree {input.tree} --output {output.results} --triple-islands Yes"
#end rule

#----------------------------------------------------------------------------
# End of file
#----------------------------------------------------------------------------
